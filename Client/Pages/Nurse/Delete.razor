@page "/nurse/{Id}"
@using HospitalSystem.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
<h2>Delete Person</h2>
@if (nurse != null)
{
    <p>Are you sure you want to delete this person with Name: <b>@nurse.Name</b></p>
    <div class="row">
        <table class="table">
            <tr>
                <td>Name</td>
                <td>@nurse.Name</td>
            </tr>
            <tr>
                <td>Birth Date</td>
                <td>@nurse.BirthDate</td>
            </tr>
            <tr>
                <td>Shift-Time</td>
                <td>@nurse.ShiftTime</td>
            </tr>

            <tr>
                <td>Joining Date</td>
                <td>@nurse.JoiningDate</td>
            </tr>
        </table>
    </div>
}
<div class="row">
    <div class="col-md-4">
        <div class="form-group">
            <input type="button" class="btn btn-primary" @onclick="@Deleted" value="Delete" />
            <input type="button" class="btn" @onclick="@Cancel" value="Cancel" />
        </div>
    </div>
</div>
@code {
    [Parameter]
    public int Id { get; set; }
    Nurse nurse = new Nurse();
    protected override async Task OnInitializedAsync()
    {
        nurse = await Http.GetFromJsonAsync<Nurse>("api/nurse/" + Id);
    }
    protected async Task Deleted()
    {
        var response = await Http.DeleteAsync("api/nurse/" + Id);
        bool deleteResponse = await response.Content.ReadFromJsonAsync<bool>();
        if (deleteResponse)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Deleted Successfully!");
            NavigationManager.NavigateTo("/Nurse");
        }
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("/doctor");
    }
}